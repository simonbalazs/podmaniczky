{"version":3,"sources":["components/AR.js","components/Overlay.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["AR","hit-testing-enabled","position","scale","rotation","gltf-model","preset","Overlay","props","id","onClick","toggleInfo","showAR","class","About","source","App","toggleView","setState","state","showInfo","console","log","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wLAeeA,G,KAZJ,kBACP,oCACI,iCACI,8BAAUC,sBAAoB,QAC1B,8BAAUC,SAAS,QAAQC,MAAM,cAAcC,SAAS,aAAaC,aAAW,kCAEpF,qCAAiBC,OAAO,aCiBrBC,EAvBC,SAACC,GAEb,OACA,yBAAKC,GAAG,WACJ,yBAAKA,GAAG,SAASC,QAASF,EAAMG,YAC5B,4CAIAH,EAAMI,QACN,yBAAKH,GAAG,UACJ,yBAAKI,MAAM,UAAUH,QAASF,EAAMG,YAChC,2BACI,qEAA4C,6BADhD,mB,iBCeLG,EAbD,SAACN,GAAD,OACV,yBAAKC,GAAG,SACJ,4BAAQI,MAAM,IAAIH,QAASF,EAAMG,YAAjC,KAGA,kBAAC,IAAD,CACII,OAlBJ,yuDC6BOC,E,kDA1Bb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IAORS,WAAa,WACX,EAAKC,SAAS,CACZN,QAAS,EAAKO,MAAMP,OACpBQ,UAAW,EAAKD,MAAMC,WAExBC,QAAQC,IAAI,EAAKH,QAXjB,EAAKA,MAAQ,CACXP,QAAQ,EACRQ,UAAU,GAJK,E,qDAiBjB,OACE,oCACE,kBAAC,EAAD,CAASR,OAAQW,KAAKJ,MAAMP,OAAQD,WAAYY,KAAKN,aACpDM,KAAKJ,MAAMP,QAAU,kBAAC,EAAD,MACrBW,KAAKJ,MAAMC,UAAY,kBAAC,EAAD,CAAOT,WAAYY,KAAKN,kB,GAvBtCO,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.05cb63c4.chunk.js","sourcesContent":["import React from 'react';\nimport '../style.css';\n\nconst AR = () => (\n    <>\n        <a-scene>\n            <a-anchor hit-testing-enabled=\"true\">\n                <a-entity position='0 0 0' scale='0.5 0.5 0.5' rotation='-360 180 0' gltf-model='url(models/podmaniczky.gltf)'></a-entity>\n            </a-anchor>\n            <a-camera-static preset=\"hiro\" />\n        </a-scene>\n    </>\n\n)\n\nexport default AR;","import React from 'react';\nimport '../style.css';\n\nconst Overlay = (props) => {\n\n    return (\n    <div id=\"overlay\">\n        <div id=\"header\" onClick={props.toggleInfo}>\n            <h1>PODMANICZKY</h1>\n        </div>\n\n        {\n            props.showAR &&\n            <div id=\"footer\">\n                <div class=\"wrapper\" onClick={props.toggleInfo}>\n                    <p>\n                        <strong>Tartsd a kamerát a QR kódra</strong><br />\n                        Mi ez? »\n                    </p>\n                </div>\n            </div>\n        }\n    </div>\n    )\n}\n\nexport default Overlay;","import React from 'react';\nimport ReactMarkdown from \"react-markdown\";\nimport '../style.css';\n\n\nconst md = `\n# podmaniczky.live\n\nA Podmaniczky Frigyes tér hosszú múltra, és rengeteg változásra tekint vissza. Ugyan a tér jelenlegi állapota ezeket nem tükrözi, de az 1940-es évekig a tér nem is létezett. A terület helyén egy épülettömb állt, mely a 20. század elején az Angol-Magyar Bank tulajdonában állt, a banki irodák mellett pedig megannyi üzletnek és lakásnak is otthont adott. A podmaniczky.live ezt az állapotot szeretné újra megmutatni, kiterjesztett valóság (AR) segítségével — az alkalmazás mind térben mind időben kiterjeszti a Podmaniczky Frigyes tér mai állapotát. \n\nA területen eredetileg álló épületek a 19. században épültek, majd a 2. világháborúban bombatalálatokat kaptak és megsemmisültek. Az épülettömb 1940-es utcaképe az 20. század elejére készült el, mikor az egész tömb az Angol-Magyar Bank tulajdonába került. A bombapusztítást követően a területet parkosították, majd csak az 1980-as években, az M3-as metró építésekor készült el az a tér, amely egészen a 2019-es átépítésig állt. A 2019-es felújítás a tér mai állapotát eredményezte, mely többek közt új zöldterületek és az ülőzónák kialakítását takarta.\n\n# Források\n- [index.hu - Kántor Viola] (https://index.hu/kultur/epiteszet/2019/10/25/podmaniczky_ter_metroallomas_zoldfelulet_tajepiteszet_lipotvaros_csomopont/)\n- [24.hu - Vincze Miklós] (https://24.hu/kultura/2019/03/30/arany-janos-utca-bajcsy-zsilinszky-ut-ismeretlen-budapest/)\n`\n\nconst About = (props) => (\n    <div id=\"about\">\n        <button class=\"x\" onClick={props.toggleInfo}>\n            x\n        </button>\n        <ReactMarkdown\n            source={md}\n            />\n\n    </div>\n\n)\n\nexport default About;","import React from 'react';\nimport AR from './components/AR';\nimport Overlay from './components/Overlay';\nimport About from './components/About';\nimport './style.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      showAR: true,\n      showInfo: false\n    }\n  }\n  \n  toggleView = () => {\n    this.setState({\n      showAR: !this.state.showAR,\n      showInfo: !this.state.showInfo\n    })\n    console.log(this.state)\n  }\n  \n  render() {\n    return (\n      <>\n        <Overlay showAR={this.state.showAR} toggleInfo={this.toggleView} />\n        {this.state.showAR && <AR />} \n        {this.state.showInfo && <About toggleInfo={this.toggleView}/>} \n      </>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}